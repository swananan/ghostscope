# GhostScope Configuration File
#
# This is an example configuration file for GhostScope.
# To use this configuration:
# 1. Copy this file to ~/.ghostscope/config.toml (user-level config)
# 2. Or rename to ghostscope.toml in your project directory (project-level config)
# 3. Or specify with --config flag: ghostscope --config path/to/config.toml
#
# Configuration priority (highest to lowest):
# 1. Command line arguments
# 2. --config specified file
# 3. ~/.ghostscope/config.toml
# 4. ./ghostscope.toml
#
# All sections and values are optional - if not specified, built-in defaults are used.

[general]
# Default log file path (overridden by --log-file)
# Default: "ghostscope.log"
log_file = "ghostscope.log"

# Default UI mode when no script is provided (overridden by --tui)
# Default: true
default_tui_mode = true

# Enable/disable logging (overridden by --log/--no-log)
# Default: true
enable_logging = true

# Log level filter (overridden by --log-level)
# Options: "error", "warn", "info", "debug", "trace"
# Default: "warn"
log_level = "trace"

[dwarf]
# DWARF debug information search paths for .gnu_debuglink files
#
# When a binary uses .gnu_debuglink to reference separate debug files,
# GhostScope searches these paths to locate the debug file.
#
# Search order (highest priority first):
# 1. Absolute path (if .gnu_debuglink contains an absolute path - rare)
# 2. User-configured search_paths + basename (configured here)
# 3. Same directory as the binary + basename
# 4. .debug subdirectory next to the binary + basename
#
# For each user-configured path, both direct and .debug subdirectory are checked:
#   - <path>/debug_filename
#   - <path>/.debug/debug_filename
#
# Features:
# - Home directory expansion: "~/" is replaced with your home directory
# - Duplicate paths are automatically removed to avoid redundant checks
# - Paths are tried in order until a matching debug file is found
#
# Common search paths:
#   - System debug symbols: "/usr/lib/debug" (for installed debug packages)
#   - Local debug symbols: "/usr/local/lib/debug"
#   - User-specific: "~/.local/lib/debug"
#   - Custom build output: "/path/to/build/debug"
#
# Note: .gnu_debuglink typically uses basename (relative path), but absolute paths
# are also supported. If you need system-wide debug directories like /usr/lib/debug,
# add them to search_paths.
#
# Default: ["/usr/lib/debug", "/usr/local/lib/debug"]
search_paths = [
    "/usr/lib/debug",
    "/usr/local/lib/debug",
    "~/.local/lib/debug"
]

[files]
# File saving options (overridden by --save-*/--no-save-* flags)
# Format: { debug = bool, release = bool }
# These control whether files are saved by default in debug/release builds

# Save LLVM IR files (overridden by --save-llvm-ir/--no-save-llvm-ir)
# Default: { debug = true, release = false }
save_llvm_ir = { debug = true, release = false }

# Save eBPF bytecode files (overridden by --save-ebpf/--no-save-ebpf)
# Default: { debug = true, release = false }
save_ebpf = { debug = true, release = false }

# Save AST files (overridden by --save-ast/--no-save-ast)
# Default: { debug = true, release = false }
save_ast = { debug = true, release = false }

[ui]
# TUI layout mode (overridden by --layout)
# Options: "Horizontal", "Vertical"
# Default: "Horizontal"
layout = "Horizontal"

# Default focused panel when TUI starts
# Options: "Source", "EbpfInfo", "InteractiveCommand"
# Default: "InteractiveCommand"
default_focus = "InteractiveCommand"

# Panel size ratios [Source, EbpfInfo, InteractiveCommand]
# These are relative ratios, e.g., [4, 3, 3] means Source gets 40%, others get 30% each
# Must be an array of 3 positive numbers
# Default: [4, 3, 3]
panel_ratios = [3, 3, 3]

# Command history configuration
[ui.history]
# Enable/disable command history file functionality
# Default: true
enabled = true

# Maximum number of history entries to keep in .ghostscope_history file
# Default: 5000
max_entries = 5000

# Realtime logging configuration
# Note: Realtime logging is controlled via TUI commands (save/stop), not auto-started
[ui.realtime_logging]
# Default directory for realtime log files when not specified
# Default: current working directory
output_dir = "."

# Default filename prefix for auto-generated realtime log files
# Default: "ghostscope_session"
filename_prefix = "ghostscope_session"

[ebpf]
# RingBuf map size in bytes (must be power of 2)
# This controls the size of the ring buffer used to transfer trace events from kernel to userspace.
# Larger sizes allow more events to be buffered but consume more kernel memory.
# Valid range: 4096 (4KB) to 16777216 (16MB)
# Recommended values:
#   - Low-frequency tracing: 131072 (128KB)
#   - Medium-frequency tracing: 262144 (256KB)
#   - High-frequency tracing: 524288 (512KB) or 1048576 (1MB)
# Default: 262144 (256KB)
ringbuf_size = 262144

# Maximum number of (pid, module) offset entries for ASLR translation
# This map stores the runtime address offsets for each loaded module in each process.
# Each entry stores offsets for text/rodata/data/bss sections.
# Valid range: 64 to 65536
# Recommended values:
#   - Single process: 1024
#   - Multi-process: 4096
#   - System-wide tracing: 8192 or 16384
# Default: 4096
proc_module_offsets_max_entries = 4096

# PerfEventArray page count (number of pages per CPU for perf buffer)
# This is only used when PerfEventArray is selected (kernel < 5.8 or when force_perf_event_array=true)
# Must be power of 2. Each page is 4KB on most systems.
# Valid range: 1 to 512 pages
# Recommended values:
#   - Low-frequency tracing: 8 pages (32KB per CPU)
#   - Medium-frequency tracing: 32 pages (128KB per CPU)
#   - High-frequency tracing: 64 pages (256KB per CPU)
# Default: 32 (128KB per CPU)
perf_page_count = 32

# Force use of PerfEventArray instead of RingBuf (for testing only)
# WARNING: This is for testing purposes only. Normally the system auto-detects
# kernel capabilities and uses RingBuf (kernel >= 5.8) or falls back to PerfEventArray.
# Set to true to force PerfEventArray even on kernels that support RingBuf.
# Default: false
force_perf_event_array = false

# Source code path configuration
# When DWARF debug info contains compilation-time paths that differ from runtime paths,
# use these settings to help ghostscope locate the actual source files.

[source]
# Path substitution rules (applied first, highest priority)
# Replaces compilation-time path prefixes with runtime path prefixes.
# Useful when source code was compiled on a different machine or moved to a new location.
# 
# Example scenarios:
#   - Compiled on CI server: /home/build/project -> /home/user/work/project
#   - Kernel sources moved: /usr/src/linux-5.15 -> /home/user/kernel/linux-5.15
#   - Cross-compilation: /buildroot/arm/src -> /local/embedded/src
#
# Format: array of { from = "compile_path_prefix", to = "runtime_path_prefix" }
substitutions = [
    # { from = "/home/build/myproject", to = "/home/user/work/myproject" },
    # { from = "/usr/src/linux", to = "/home/user/kernel/linux" },
]

# Additional search directories (fallback when substitution fails)
# When a source file cannot be found via substitution, ghostscope will search
# these directories by filename (basename matching).
# Similar to GDB's "directory" command.
#
# Format: array of directory paths
search_dirs = [
    # "/home/user/sources",
    # "/opt/local/src",
]

# Runtime configuration:
# You can also configure source paths interactively using the 'srcpath' command:
#   srcpath                              - Show current configuration
#   srcpath map <from> <to>              - Add path substitution rule
#   srcpath add <directory>              - Add search directory
#   srcpath remove <path>                - Remove a rule
#   srcpath clear                        - Clear all runtime rules
#   srcpath reset                        - Reset to config file rules
#
# Runtime rules take precedence over config file rules and are not persisted.
